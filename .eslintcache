[{"D:\\projects\\tryouts\\mern_crud_base\\src\\index.js":"1","D:\\projects\\tryouts\\mern_crud_base\\src\\App.js":"2","D:\\projects\\tryouts\\mern_crud_base\\src\\reportWebVitals.js":"3","D:\\projects\\tryouts\\mern_crud_base\\src\\Routes\\route.js":"4","D:\\projects\\tryouts\\mern_crud_base\\src\\variables\\importfile.js":"5","D:\\projects\\tryouts\\mern_crud_base\\src\\Routes\\Routers.js":"6","D:\\projects\\tryouts\\mern_crud_base\\src\\others\\error_boundary.js":"7","D:\\projects\\tryouts\\mern_crud_base\\src\\others\\hoc.js":"8","D:\\projects\\tryouts\\mern_crud_base\\src\\redux\\reducer.js":"9","D:\\projects\\tryouts\\mern_crud_base\\src\\components\\Profile.js":"10","D:\\projects\\tryouts\\mern_crud_base\\src\\components\\profilecrud\\profile_list.js":"11","D:\\projects\\tryouts\\mern_crud_base\\src\\others\\apiservice.js":"12","D:\\projects\\tryouts\\mern_crud_base\\src\\components\\profilecrud\\profile_crud.js":"13","D:\\projects\\tryouts\\mern_crud_base\\src\\others\\loader.js":"14"},{"size":669,"mtime":1607662697395,"results":"15","hashOfConfig":"16"},{"size":130,"mtime":1607688668975,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":1207,"mtime":1607854409636,"results":"19","hashOfConfig":"16"},{"size":398,"mtime":1607770148097,"results":"20","hashOfConfig":"16"},{"size":736,"mtime":1607853575590,"results":"21","hashOfConfig":"16"},{"size":418,"mtime":1607593384933,"results":"22","hashOfConfig":"16"},{"size":490,"mtime":1607855452112,"results":"23","hashOfConfig":"16"},{"size":746,"mtime":1607838292623,"results":"24","hashOfConfig":"16"},{"size":2558,"mtime":1607855180584,"results":"25","hashOfConfig":"16"},{"size":2740,"mtime":1607853417147,"results":"26","hashOfConfig":"16"},{"size":1344,"mtime":1607852921405,"results":"27","hashOfConfig":"16"},{"size":26144,"mtime":1607853282378,"results":"28","hashOfConfig":"16"},{"size":542,"mtime":1607855430614,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"nikrbc",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":53,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\projects\\tryouts\\mern_crud_base\\src\\index.js",[],["62","63"],"D:\\projects\\tryouts\\mern_crud_base\\src\\App.js",[],"D:\\projects\\tryouts\\mern_crud_base\\src\\reportWebVitals.js",[],"D:\\projects\\tryouts\\mern_crud_base\\src\\Routes\\route.js",["64"],"import React, { Component } from 'react';\r\nimport { Hoc,routings,Reducer } from \"../variables/importfile\"\r\nimport { Switch, Route ,Redirect} from 'react-router-dom';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport \"../assets/style.css\"\r\n\r\n// const hist = createBrowserHistory();\r\nconst store = createStore(Reducer);\r\n\r\n\r\nclass App extends Component {\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n  \r\n    render() {\r\n     \r\n        return (\r\n            <Provider store={store}>  \r\n\r\n                <Switch>\r\n\r\n                    {routings.map((route, index) => {\r\n                        return <Route\r\n                            key={index}\r\n                            path={route.path}\r\n                            // exact={route.exact}\r\n                            name={route.path}\r\n                            render={props => (\r\n                                <route.component {...props} />\r\n                            )} />\r\n\r\n                    })\r\n                    }   \r\n                    <Redirect from=\"/\" to=\"profile/list\" />\r\n \r\n                </Switch>\r\n           </Provider>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Hoc(App);\r\n","D:\\projects\\tryouts\\mern_crud_base\\src\\variables\\importfile.js",[],"D:\\projects\\tryouts\\mern_crud_base\\src\\Routes\\Routers.js",[],"D:\\projects\\tryouts\\mern_crud_base\\src\\others\\error_boundary.js",[],"D:\\projects\\tryouts\\mern_crud_base\\src\\others\\hoc.js",[],"D:\\projects\\tryouts\\mern_crud_base\\src\\redux\\reducer.js",[],"D:\\projects\\tryouts\\mern_crud_base\\src\\components\\Profile.js",[],"D:\\projects\\tryouts\\mern_crud_base\\src\\components\\profilecrud\\profile_list.js",["65"],"import React, { Component } from 'react';\r\nimport { Hoc, images } from \"../../variables/importfile\"\r\nimport { connect } from 'react-redux';\r\nimport {Button} from '@material-ui/core';\r\nimport {Add,Edit,DeleteForever} from '@material-ui/icons';\r\nimport {deleteProfile,errorAlert,info} from \"../../others/apiservice\"\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      array: []\r\n    }\r\n  }\r\n\r\n  crudpage(data) {\r\n    this.props.history.push({ \r\n      pathname: '/profile/crud',\r\n      state: data\r\n    });\r\n  }\r\n\r\n\r\n  deleteProfile(data){\r\n    this.props.changeList(this.props.profile_array,true)\r\n    deleteProfile(data).then(response => {\r\n      info(\"Profile Deleted Successfully\")\r\n\r\n      this.props.changeList(response.data.data,false)\r\n\r\n    }).catch(error => {\r\n      this.props.changeList(this.props.profile_array,false)\r\n      errorAlert(error.response.data.message[0])\r\n\r\n    })\r\n  }\r\n  render() {\r\n\r\n    return (\r\n      <div style={{ margin: 20 }}>\r\n        <div style={{ margin: 20 }}  >\r\n          <Button variant=\"contained\" color=\"primary\" onClick={()=>this.crudpage(true)}><Add />Add New Profile</Button>\r\n        </div>\r\n        <div className=\"row\">\r\n          {this.props.profile_array.map((obj, index) => {\r\n            return <div className=\"col-lg-3\" key={index}>\r\n              <div className=\"card\">\r\n                <img className=\"card-img-top\" src={images.im1} alt=\"Card image cap\" />\r\n                <div className=\"card-body\">\r\n                  <h5 className=\"card-title\">{obj.name}</h5>\r\n                  <p className=\"card-text\">Email ID : {obj.email}</p>\r\n                  <p className=\"card-text\">Contact no : {obj.contact}</p>\r\n                  <p className=\"card-text\">DOB : {obj.DOB}</p>\r\n\r\n                  {/* <p className=\"card-text\">Some quick example text to build on the card title and make up the bulk of the card's content.</p> */}\r\n                  <Button style={{marginRight:10}} variant=\"contained\" color=\"primary\" onClick={()=>this.crudpage(obj)}><Edit /></Button>                \r\n                  <Button variant=\"contained\" color=\"secondary\" onClick={()=>this.deleteProfile(obj._id)}><DeleteForever /></Button>\r\n                </div>\r\n              </div>  </div>\r\n\r\n          })}\r\n\r\n        </div>\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    profile_array:state.profile_array,\r\n    Loader:state.Loader\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\r\n  return {\r\n    changeList: (profile_array,Loader) => { dispatch({ type: 'Profile_list', profile_array: profile_array,\"Loader\":Loader}) }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Hoc(App));\r\n","D:\\projects\\tryouts\\mern_crud_base\\src\\others\\apiservice.js",[],"D:\\projects\\tryouts\\mern_crud_base\\src\\components\\profilecrud\\profile_crud.js",["66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118"],"import React, { Component } from 'react';\r\nimport { Hoc } from \"../../variables/importfile\"\r\nimport { connect } from 'react-redux';\r\nimport { FormControlLabel, TextField, Button, Stepper,Checkbox, ListItemSecondaryAction, StepLabel, Step, List, ListSubheader, ListItem, ListItemText, IconButton } from '@material-ui/core';\r\nimport \"../../assets/style.css\"\r\nimport { DeleteForever,KeyboardBackspace, Label } from '@material-ui/icons';\r\nimport moment from \"moment\"\r\nimport { addProfile, updateProfile,info,errorAlert } from \"../../others/apiservice\"\r\n\r\nimport {\r\n  FormBuilder,\r\n  FieldGroup,\r\n  FieldControl,\r\n  Validators,\r\n} from \"react-reactive-form\";\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      loader: false,\r\n      activeStep: 0,\r\n      educationArray:[],\r\n      careerArray:[],\r\n      name:\"Add\",\r\n      // educationArray: [{ \"institute\": \"test\", \"start\": \"2020-10-29\", \"end\": \"2020-10-29\", \"subject\": \"tested\", \"degree\": \"testedr\" }],\r\n      // careerArray: [{ \"position\": \"test\", \"company\": \"test\", \"start\": \"2020-10-29\", \"end\": \"2020-10-29\" }],\r\n      step: ['Personal Info', 'Educational Info', 'Career Info', 'Preview']\r\n    }\r\n  }\r\n  profileForm = FormBuilder.group({\r\n    id: [\"\"],\r\n    name: [\"\", [Validators.required]],\r\n    email: [\"\", [Validators.required, Validators.email]],\r\n    contact: [\"\", [Validators.required, Validators.maxLength(10), Validators.minLength(10)]],\r\n    DOB: [\"\", [Validators.required]],\r\n    address: [\"\", [Validators.required]]\r\n  });\r\n  componentDidMount() {\r\n\r\n    var x = this.props.history.location.state\r\n    if (x == undefined) {\r\n      this.props.history.push({\r\n        pathname: '/profile/list'\r\n      });\r\n    } else {\r\n      if (x != true) {\r\n        this.profileForm.setValue({\r\n          id: x._id,\r\n          name: x.name,\r\n          email: x.email,\r\n          contact: x.contact,\r\n          DOB: x.DOB,\r\n          address: x.address\r\n\r\n        })\r\n        this.setState({ educationArray: x.education, careerArray: x.career,name:\"Update\" })\r\n\r\n      }\r\n    }\r\n  }\r\n  switchstep(data) {\r\n    var x = this.state.activeStep\r\n    var y = 0\r\n    if (data == true) {\r\n      if (x == 0) {\r\n        y = 1\r\n      } else if (x == 1) {\r\n        y = 2\r\n      } else if (x == 2) {\r\n        y = 3\r\n      } else if (x == 3) {\r\n        y = 3\r\n      }\r\n\r\n    } else if (data == false) {\r\n      if (x == 1) {\r\n        y = 0\r\n      } else if (x == 2) {\r\n        y = 1\r\n      } else if (x == 3) {\r\n        y = 2\r\n      }\r\n\r\n    }\r\n    this.setState({ activeStep: y })\r\n    // console.log(this.state.educationArray)\r\n\r\n  }\r\n  AddEducation() {\r\n    var x = { \"institute\": \"\", \"start\": \"\", \"end\": \"\", \"subject\": \"\", \"degree\": \"\" ,'type':false}\r\n    var y = this.state.educationArray\r\n    y.push(x)\r\n    this.setState({ educationArray: y }, () => {\r\n      // console.log(this.state.educationArray)\r\n    })\r\n  }\r\n  RemoveEducation(ind) {\r\n    var y = this.state.educationArray\r\n    y = y.filter((obj, index) => index != ind)\r\n    this.setState({ educationArray: y })\r\n  }\r\n  AddCareer() {\r\n    var x = { \"position\": \"\", \"company\": \"\", \"start\": \"\", \"end\": \"\",\"type\":false }\r\n    var y = this.state.careerArray\r\n    y.push(x)\r\n    this.setState({ careerArray: y })\r\n  }\r\n  RemoveCareer(ind) {\r\n    var y = this.state.careerArray\r\n    y = y.filter((obj, index) => index != ind)\r\n    this.setState({ careerArray: y })\r\n  }\r\n\r\n\r\n  onchangeInput(value, key, index) {\r\n    // console.log(value)\r\n    var x = this.state.educationArray\r\n    x[index][key] = value\r\n    this.setState({ educationArray: x }, () => {\r\n      // console.log(this.state.educationArray)\r\n    })\r\n\r\n\r\n  }\r\n  onchangecheckbox(value, key, index) {\r\n    // console.log(value.target.checked,12345)\r\n      var y=true\r\n      if(value==\"false\" || value==false){\r\n        y=false\r\n      }\r\n    var x = this.state.educationArray\r\n    x[index][key] = y\r\n    x[index][\"end\"] = \"\"\r\n    if(y==true){\r\n      x[index][\"end\"] = true\r\n\r\n    }\r\n    this.setState({ educationArray: x }, () => {\r\n    })\r\n\r\n\r\n  }\r\n  onchangecheckbox1(value, key, index) {\r\n    // console.log(value.target.checked,12345)\r\n      var y=true\r\n      if(value==\"false\" || value==false){\r\n        y=false\r\n      }\r\n    var x = this.state.careerArray\r\n    x[index][key] = y\r\n    x[index][\"end\"] = \"\"\r\n\r\n    if(y==true){\r\n      x[index][\"end\"] = true\r\n\r\n    }\r\n    this.setState({ careerArray: x }, () => {\r\n    })\r\n\r\n\r\n  }\r\n  onchangeInput1(value, key, index) {\r\n    var x = this.state.careerArray\r\n    x[index][key] = value\r\n    this.setState({ careerArray: x })\r\n\r\n\r\n  }\r\n  educationtab() {\r\n    var array = []\r\n    var x = this.state.educationArray\r\n    x.map((obj, index) => {\r\n      for (var key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n          var x = obj[key]\r\n          var z = index + 1\r\n\r\n          if (key == \"institute\" || key == \"subject\" || key == \"degree\") {\r\n            if (x == undefined || x == null || x == \"\") {\r\n              console.log(key,x)\r\n\r\n              var message = key + \" is an mandatory field in \" + z + \" row\"\r\n              array.push(message)\r\n            }\r\n          }else  if ( key == \"type\") {\r\n           \r\n          } else {\r\n            if(obj.type==false){\r\n              var bool = moment(x, 'YYYY-MM-DD', true).isValid()\r\n              // console.log(bool,obj.type,x)\r\n              if (bool == false) {\r\n                var message = key + \" is an mandatory field in \" + z + \" row\"\r\n                array.push(message)\r\n              }\r\n            }\r\n          \r\n\r\n          }\r\n        }\r\n      }\r\n      return obj\r\n    })\r\n    // console.log(array)\r\n    if (array.length == 0) {\r\n      this.switchstep(true)\r\n\r\n    }else{\r\n      errorAlert(array[0])\r\n\r\n    }\r\n  }\r\n  careertab() {\r\n    var array = []\r\n    var x = this.state.careerArray\r\n    x.map((obj, index) => {\r\n      for (var key in obj) {\r\n        if (obj.hasOwnProperty(key)) {\r\n          var x = obj[key]\r\n          var z = index + 1\r\n\r\n          if (key == \"position\" || key == \"company\") {\r\n            if (x == undefined || x == null || x == \"\") {\r\n              var message = key + \" is an mandatory field in \" + z + \" row\"\r\n              array.push(message)\r\n            }\r\n          }else  if ( key == \"type\") {\r\n           \r\n          } else {\r\n            if(obj.type==false){\r\n            var bool = moment(x, 'YYYY-MM-DD', true).isValid()\r\n            if (bool == false) {\r\n              var message = key + \" is an mandatory field in \" + z + \" row\"\r\n              array.push(message)\r\n            }\r\n\r\n          }\r\n          }\r\n        }\r\n      }\r\n      return obj\r\n    })\r\n    if (array.length == 0) {\r\n      this.switchstep(true)\r\n\r\n    }else{\r\n      errorAlert(array[0])\r\n\r\n    }\r\n  }\r\n \r\n  submit() {\r\n    var x = this.profileForm.value\r\n    x.education = this.state.educationArray\r\n    x.career = this.state.careerArray\r\n    if (x.id == \"\" || x.id == undefined) {\r\n      this.props.changeList(this.props.profile_array,true)\r\n\r\n      addProfile(x).then(response => {\r\n        this.props.changeList(response.data.data,false)\r\n        info(\"Profile Added Successfully\")\r\n\r\n        this.props.history.push({ pathname: '/profile/list' })\r\n\r\n      }).catch(error => {\r\n        // console.log(error.response.data.message[0])\r\n        this.props.changeList(this.props.profile_array,false)\r\n        errorAlert(error.response.data.message[0])\r\n\r\n\r\n      })\r\n    } else {\r\n      this.props.changeList(this.props.profile_array,true)\r\n\r\n      updateProfile(x).then(response => {\r\n        this.props.changeList(response.data.data,false)\r\n        info(\"Profile Updated Successfully\")\r\n\r\n        this.props.history.push({ pathname: '/profile/list' })\r\n      }).catch(error => {\r\n        this.props.changeList(this.props.profile_array,false)\r\n        errorAlert(error.response.data.message[0])\r\n\r\n      })\r\n    }\r\n  }\r\n  render() {\r\n    const { step, activeStep } = this.state\r\n    var form = this.profileForm.value\r\n\r\n\r\n    return (\r\n      <div style={{ margin: 20 }}>\r\n        <h4>\r\n        <IconButton edge=\"start\" color=\"primary\"\r\n                    onClick={() =>this.props.history.push({ pathname: '/profile/list' })}\r\n                    aria-label=\"menu\" size=\"medium\">\r\n                    <KeyboardBackspace />\r\n                  </IconButton>\r\n          {this.state.name + \" Profile\"}\r\n        </h4>\r\n\r\n        <Stepper activeStep={this.state.activeStep}>\r\n          {step.map((label, index) => {\r\n            const stepProps = {};\r\n            stepProps.completed = true;\r\n\r\n\r\n\r\n            if (index > this.state.activeStep) {\r\n              stepProps.completed = false;\r\n            }\r\n\r\n            return <Step key={index} >\r\n              <StepLabel >{label}</StepLabel>\r\n            </Step>\r\n          })}\r\n        </Stepper>\r\n        <div>\r\n          {activeStep == 0 &&\r\n            <div className=\"col-lg-12\" >\r\n              <div class=\"card\">\r\n                <div class=\"card-body\">\r\n                  <FieldGroup\r\n                    control={this.profileForm}\r\n                    strict={false}\r\n                    render={({ get, invalid, value }) => (\r\n                      <form>\r\n                        <div className=\"row\" >\r\n                          <div className=\"col-lg-3 inputs\" >\r\n                            <FieldControl\r\n                              name=\"name\"\r\n                              strict={false}\r\n                              render={({ handler, touched, hasError }) => (\r\n                                <div >\r\n\r\n                                  <TextField  type=\"text\" required fullWidth variant=\"outlined\" error={touched && hasError(\"required\")} label=\"Profile Name\" {...handler(\"text\")} />\r\n                                  <span className=\"error\">\r\n                                    {touched\r\n                                      && hasError(\"required\")\r\n                                      && `* Profile name is required`}\r\n                                  </span>\r\n                                </div>\r\n                              )}\r\n                            />\r\n                          </div>\r\n                          <div className=\"col-lg-3 inputs\">\r\n                            <FieldControl\r\n                              name=\"email\"\r\n                              strict={false}\r\n                              render={({ handler, touched, hasError }) => (\r\n                                <div >\r\n                                  <TextField type=\"text\" required fullWidth variant=\"outlined\" error={touched && hasError(\"required\")} label=\"Email Id\" {...handler(\"text\")} />\r\n\r\n                                  <span className=\"error\">{touched\r\n                                    && hasError(\"required\")\r\n                                    && `* Email is required`}\r\n                                    {touched\r\n                                      && hasError(\"email\")\r\n                                      && `* Enter Valid Email Id`}\r\n                                  </span>\r\n\r\n                                </div>\r\n                              )}\r\n                            />\r\n                          </div>\r\n                          <div className=\"col-lg-3 inputs\">\r\n                            <FieldControl\r\n                              name=\"contact\"\r\n                              strict={false}\r\n                              render={({ handler, touched, hasError }) => (\r\n                                <div >\r\n\r\n                                  <TextField type=\"number\" required fullWidth variant=\"outlined\" error={touched && hasError(\"required\")} label=\"Contact number\" {...handler(\"number\")} />\r\n                                  <span className=\"error\">{touched\r\n                                    && hasError(\"required\")\r\n                                    && `* Contact number is required`}\r\n                                    {touched\r\n                                      && hasError(\"minLength\")\r\n                                      && `* Contact number must be 10 digits`}\r\n                                    {touched\r\n                                      && hasError(\"maxLength\")\r\n                                      && `* Contact number must be 10 digits`}\r\n\r\n                                  </span>\r\n\r\n                                </div>\r\n                              )}\r\n                            />\r\n                          </div>\r\n                          <div className=\"col-lg-3 inputs\">\r\n                            <FieldControl\r\n                              name=\"DOB\"\r\n                              strict={false}\r\n                              render={({ handler, touched, hasError }) => (\r\n                                <div >\r\n\r\n                                  <TextField type=\"date\" required fullWidth variant=\"outlined\" error={touched && hasError(\"required\")} label=\"DOB\" {...handler(\"date\")} />\r\n                                  <span className=\"error\">\r\n                                    {touched\r\n                                      && hasError(\"required\")\r\n                                      && `* DOB is required`}\r\n                                  </span>\r\n                                </div>\r\n                              )}\r\n                            />\r\n                          </div>\r\n                          <div className=\"col-lg-3 inputs\">\r\n                            <FieldControl\r\n                              name=\"address\"\r\n                              strict={false}\r\n                              render={({ handler, touched, hasError }) => (\r\n                                <div >\r\n\r\n                                  <TextField type=\"text\" required fullWidth variant=\"outlined\" error={touched && hasError(\"required\")} label=\"Address\" {...handler(\"text\")} />\r\n                                  <span className=\"error\">\r\n                                    {touched\r\n                                      && hasError(\"required\")\r\n                                      && `* Address is required`}\r\n                                  </span>\r\n                                </div>\r\n                              )}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n\r\n                          <div className=\"col-lg-3 inputs\">\r\n                            <div className=\"login-button changepassword text-center\">\r\n                              <Button disabled={activeStep === 0} onClick={() => this.switchstep(false)}>\r\n                              <KeyboardBackspace />  Back\r\n              </Button>\r\n                              <Button\r\n                                type=\"submit\"\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                disabled={invalid}\r\n                                onClick={() => this.switchstep(true)}\r\n                              >Next</Button>\r\n                            </div>\r\n                          </div>\r\n                       \r\n\r\n                        </div>\r\n                      </form>\r\n                    )}\r\n                  />\r\n                </div>\r\n              </div>  </div>\r\n          }\r\n          {activeStep == 1 &&\r\n            <div class=\"card\"  >\r\n              {/* <img class=\"card-img-top\" src={images.im1} alt=\"Card image cap\" /> */}\r\n              <div class=\"card-body\" >\r\n                <div className=\"row inputs\" >\r\n\r\n                  <div className=\"col-md-3\">\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={() => this.AddEducation()}\r\n                    // className={classes.button}\r\n                    >\r\n                      Add Education Details\r\n              </Button>\r\n\r\n                  </div>\r\n                  <div className=\"col-md-2\">\r\n\r\n                    <Button disabled={activeStep === 0} onClick={() => this.switchstep(false)}>\r\n                    <KeyboardBackspace />    Back\r\n</Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={() => this.educationtab()}\r\n                    // onClick={() => this.switchstep(true)}\r\n                    // className={classes.button}\r\n                    >\r\n                      {activeStep === step.length - 1 ? 'Finish' : 'Next'}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n              {this.state.educationArray.map((obj, index) => {\r\n\r\n                return <div className=\"row inputs\" key={index} >\r\n                  <div className=\"col-lg-2 inputs\">\r\n                    <TextField type=\"text\"\r\n                      value={obj.institute}\r\n                      onChange={(event) => this.onchangeInput(event.target.value, \"institute\", index)}\r\n                      fullWidth variant=\"outlined\" label=\"Insitute Name\" />\r\n                  </div>\r\n                  <div className=\"col-md-2 inputs\">\r\n                    <TextField type=\"date\"\r\n                      onChange={(event) => this.onchangeInput(event.target.value, \"start\", index)}\r\n                      value={obj.start}\r\n\r\n                      fullWidth variant=\"outlined\" label=\"Profile Name\" />\r\n                  </div>\r\n                  <div className=\"col-md-1 inputs\" style={{display:'flex',flexDirection:\"column\"}}>\r\n                  <span>Working</span>\r\n                  <Checkbox checked={obj.type}\r\n                  value={obj.type} color=\"primary\" \r\n                  onChange={(event) => this.onchangecheckbox(event.target.checked, \"type\", index)}\r\n                  />\r\n                  </div>\r\n                  {obj.type==false &&\r\n                  <div className=\"col-md-2 inputs\">\r\n                    <TextField type=\"date\"\r\n                      value={obj.end}\r\n\r\n                      onChange={(event) => this.onchangeInput(event.target.value, \"end\", index)}\r\n                      fullWidth variant=\"outlined\" label=\"Profile Name\" />\r\n                  </div>\r\n                  }\r\n                 <div className=\"col-lg-2 inputs\">\r\n                    <TextField type=\"text\"\r\n                      value={obj.subject}\r\n\r\n                      onChange={(event) => this.onchangeInput(event.target.value, \"subject\", index)}\r\n                      fullWidth variant=\"outlined\" label=\"Subject Name\" />\r\n                  </div>\r\n                  <div className=\"col-lg-2 inputs\">\r\n                    <TextField type=\"text\"\r\n                      value={obj.degree}\r\n\r\n                      onChange={(event) => this.onchangeInput(event.target.value, \"degree\", index)}\r\n                      fullWidth variant=\"outlined\" label=\"Degree\" />\r\n                  </div>\r\n                  <IconButton edge=\"start\" color=\"secondary\"\r\n                    onClick={() => this.RemoveEducation(index)}\r\n                    aria-label=\"menu\" size=\"medium\">\r\n                    <DeleteForever />\r\n                  </IconButton>\r\n                </div>\r\n\r\n              })}\r\n\r\n            </div>}\r\n          {activeStep == 2 &&\r\n            <div class=\"card\" >\r\n              {/* <img class=\"card-img-top\" src={images.im1} alt=\"Card image cap\" /> */}\r\n              <div class=\"card-body \" >\r\n                <div className=\"row inputs\" >\r\n\r\n                  <div className=\"col-md-2\">\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={() => this.AddCareer()}\r\n                    // className={classes.button}\r\n                    >\r\n                      Add Company\r\n              </Button>\r\n\r\n                  </div>\r\n                  <div className=\"col-md-2\">\r\n\r\n                    <Button disabled={activeStep === 0} onClick={() => this.switchstep(false)}>\r\n                    <KeyboardBackspace /> Back\r\n</Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={() => this.careertab()}\r\n                    // className={classes.button}\r\n                    >\r\n                      {activeStep === step.length - 1 ? 'Finish' : 'Next'}\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n              {this.state.careerArray.map((obj, index) => {\r\n                return <div className=\"row rows\" key={index}>\r\n                  <div className=\"col-lg-2 inputs\">\r\n                    <TextField type=\"text\"\r\n                      value={obj.position}\r\n\r\n                      onChange={(event) => this.onchangeInput1(event.target.value, \"position\", index)}\r\n                      fullWidth variant=\"outlined\" label=\"Position Name\" />\r\n                  </div>\r\n                  <div className=\"col-lg-2 inputs\">\r\n                    <TextField type=\"text\"\r\n                      value={obj.company}\r\n\r\n                      onChange={(event) => this.onchangeInput1(event.target.value, \"company\", index)}\r\n                      fullWidth variant=\"outlined\" label=\"Company Name\" />\r\n                  </div>\r\n                  <div className=\"col-lg-2 inputs\">\r\n                    <TextField type=\"date\"\r\n                      value={obj.start}\r\n\r\n                      onChange={(event) => this.onchangeInput1(event.target.value, \"start\", index)}\r\n\r\n                      fullWidth variant=\"outlined\" label=\"Joined\" />\r\n                  </div>\r\n                  <div className=\"col-md-2 inputs\" >\r\n                  <span>Still Working</span>\r\n                  <Checkbox checked={obj.type}\r\n                  value={obj.type} color=\"primary\" \r\n                  onChange={(event) => this.onchangecheckbox1(event.target.checked, \"type\", index)}\r\n                  />\r\n                  </div>\r\n                  {obj.type==false &&\r\n                  <div className=\"col-lg-2 inputs\">\r\n                    <TextField type=\"date\"\r\n                      value={obj.end}\r\n\r\n                      onChange={(event) => this.onchangeInput1(event.target.value, \"end\", index)}\r\n                      fullWidth variant=\"outlined\" label=\"Resigned\" />\r\n                  </div>\r\n              }\r\n                  <IconButton edge=\"start\" color=\"secondary\"\r\n                    onClick={() => this.RemoveCareer(index)}\r\n                    aria-label=\"menu\" size=\"medium\">\r\n                    <DeleteForever />\r\n                  </IconButton>\r\n                </div>\r\n\r\n              })}\r\n\r\n            </div>}\r\n          {activeStep == 3 &&\r\n            <div class=\"card\" >\r\n              {/* <img class=\"card-img-top\" src={images.im1} alt=\"Card image cap\" /> */}\r\n              <div class=\"card-body\">\r\n                <div className=\"row rows\" >\r\n\r\n                  <div className=\"col-md-2\">\r\n\r\n                    <Button disabled={activeStep === 0} onClick={() => this.switchstep(false)}>\r\n                    <KeyboardBackspace /> Back\r\n</Button>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={() => this.submit()}\r\n                    // className={classes.button}\r\n                    >\r\n                      Submit\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n              <div className=\"show\">\r\n              <List subheader={<ListSubheader>Profile</ListSubheader>} >\r\n\r\n                <ListItem  ><ListItemText primary={\"Name : \" + form.name} /></ListItem>\r\n                <ListItem  ><ListItemText primary={\"Email ID : \" + form.email} /></ListItem>\r\n                <ListItem  ><ListItemText primary={\"Contact no : \" + form.contact} /></ListItem>\r\n                <ListItem  ><ListItemText primary={\"DOB : \" + form.DOB} /></ListItem>\r\n                <ListItem  ><ListItemText primary={\"Address : \" + form.address} /></ListItem>\r\n              </List>\r\n              <List subheader={<ListSubheader>Education Info</ListSubheader>}>\r\n\r\n                {this.state.educationArray.map((obj, index) => {\r\n                  return <ListItem key={index}>\r\n\r\n                    <ListItemText primary={\"Institute : \" + obj.institute} />\r\n                    <ListItemText primary={\"Started : \" + obj.start} />\r\n                    {obj.end==true ?  <ListItemText primary={\"Completed : \" +  \"not completed\"} />:\r\n                     <ListItemText primary={\"Completed : \" + obj.end} />}\r\n                    <ListItemText primary={\"Subject : \" + obj.subject} />\r\n                    <ListItemText primary={\"Degree : \" + obj.degree} />\r\n\r\n                  </ListItem>\r\n\r\n\r\n                })}\r\n              </List>\r\n\r\n\r\n              <List subheader={<ListSubheader>Career Info</ListSubheader>}>\r\n\r\n                {this.state.careerArray.map((obj, index) => {\r\n                  return <ListItem key={index}>\r\n\r\n                    <ListItemText primary={\"Position : \" + obj.position} />\r\n                    <ListItemText primary={\"Company : \" + obj.company} />\r\n                    <ListItemText primary={\"Joined : \" + obj.start} />\r\n                    {obj.end==true ?  <ListItemText primary={\"Completed : \" +  \"Still Working\"} />:\r\n                     <ListItemText primary={\"Completed : \" + obj.end} />}\r\n\r\n                  </ListItem>\r\n\r\n\r\n                })}\r\n              </List>\r\n           </div>\r\n            </div>}\r\n\r\n          {/* <Typography >{() => this.getStepContent(activeStep)}</Typography> */}\r\n          <div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    profile_array:state.profile_array,\r\n    Loader:state.Loader\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\r\n  return {\r\n    changeList: (profile_array,Loader) => { dispatch({ type: 'Profile_list', profile_array: profile_array,\"Loader\":Loader}) }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Hoc(App));\r\n","D:\\projects\\tryouts\\mern_crud_base\\src\\others\\loader.js",["119"],{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":13,"column":5,"nodeType":"126","messageId":"127","endLine":15,"endColumn":6},{"ruleId":"128","severity":1,"message":"129","line":50,"column":17,"nodeType":"130","endLine":50,"endColumn":87},{"ruleId":"131","severity":1,"message":"132","line":4,"column":10,"nodeType":"133","messageId":"134","endLine":4,"endColumn":26},{"ruleId":"131","severity":1,"message":"135","line":4,"column":65,"nodeType":"133","messageId":"134","endLine":4,"endColumn":88},{"ruleId":"131","severity":1,"message":"136","line":6,"column":43,"nodeType":"133","messageId":"134","endLine":6,"endColumn":48},{"ruleId":"137","severity":1,"message":"138","line":42,"column":11,"nodeType":"139","messageId":"140","endLine":42,"endColumn":13},{"ruleId":"137","severity":1,"message":"141","line":47,"column":13,"nodeType":"139","messageId":"140","endLine":47,"endColumn":15},{"ruleId":"137","severity":1,"message":"138","line":65,"column":14,"nodeType":"139","messageId":"140","endLine":65,"endColumn":16},{"ruleId":"137","severity":1,"message":"138","line":66,"column":13,"nodeType":"139","messageId":"140","endLine":66,"endColumn":15},{"ruleId":"137","severity":1,"message":"138","line":68,"column":20,"nodeType":"139","messageId":"140","endLine":68,"endColumn":22},{"ruleId":"137","severity":1,"message":"138","line":70,"column":20,"nodeType":"139","messageId":"140","endLine":70,"endColumn":22},{"ruleId":"137","severity":1,"message":"138","line":72,"column":20,"nodeType":"139","messageId":"140","endLine":72,"endColumn":22},{"ruleId":"137","severity":1,"message":"138","line":76,"column":21,"nodeType":"139","messageId":"140","endLine":76,"endColumn":23},{"ruleId":"137","severity":1,"message":"138","line":77,"column":13,"nodeType":"139","messageId":"140","endLine":77,"endColumn":15},{"ruleId":"137","severity":1,"message":"138","line":79,"column":20,"nodeType":"139","messageId":"140","endLine":79,"endColumn":22},{"ruleId":"137","severity":1,"message":"138","line":81,"column":20,"nodeType":"139","messageId":"140","endLine":81,"endColumn":22},{"ruleId":"137","severity":1,"message":"141","line":100,"column":40,"nodeType":"139","messageId":"140","endLine":100,"endColumn":42},{"ruleId":"137","severity":1,"message":"141","line":111,"column":40,"nodeType":"139","messageId":"140","endLine":111,"endColumn":42},{"ruleId":"137","severity":1,"message":"138","line":129,"column":15,"nodeType":"139","messageId":"140","endLine":129,"endColumn":17},{"ruleId":"137","severity":1,"message":"138","line":129,"column":33,"nodeType":"139","messageId":"140","endLine":129,"endColumn":35},{"ruleId":"137","severity":1,"message":"138","line":135,"column":9,"nodeType":"139","messageId":"140","endLine":135,"endColumn":11},{"ruleId":"137","severity":1,"message":"138","line":147,"column":15,"nodeType":"139","messageId":"140","endLine":147,"endColumn":17},{"ruleId":"137","severity":1,"message":"138","line":147,"column":33,"nodeType":"139","messageId":"140","endLine":147,"endColumn":35},{"ruleId":"137","severity":1,"message":"138","line":154,"column":9,"nodeType":"139","messageId":"140","endLine":154,"endColumn":11},{"ruleId":"137","severity":1,"message":"138","line":179,"column":19,"nodeType":"139","messageId":"140","endLine":179,"endColumn":21},{"ruleId":"137","severity":1,"message":"138","line":179,"column":41,"nodeType":"139","messageId":"140","endLine":179,"endColumn":43},{"ruleId":"137","severity":1,"message":"138","line":179,"column":61,"nodeType":"139","messageId":"140","endLine":179,"endColumn":63},{"ruleId":"137","severity":1,"message":"138","line":180,"column":19,"nodeType":"139","messageId":"140","endLine":180,"endColumn":21},{"ruleId":"137","severity":1,"message":"138","line":180,"column":50,"nodeType":"139","messageId":"140","endLine":180,"endColumn":52},{"ruleId":"137","severity":1,"message":"138","line":186,"column":27,"nodeType":"139","messageId":"140","endLine":186,"endColumn":29},{"ruleId":"137","severity":1,"message":"138","line":189,"column":24,"nodeType":"139","messageId":"140","endLine":189,"endColumn":26},{"ruleId":"137","severity":1,"message":"138","line":192,"column":24,"nodeType":"139","messageId":"140","endLine":192,"endColumn":26},{"ruleId":"142","severity":1,"message":"143","line":193,"column":21,"nodeType":"133","messageId":"144","endLine":193,"endColumn":28},{"ruleId":"137","severity":1,"message":"138","line":205,"column":22,"nodeType":"139","messageId":"140","endLine":205,"endColumn":24},{"ruleId":"137","severity":1,"message":"138","line":222,"column":19,"nodeType":"139","messageId":"140","endLine":222,"endColumn":21},{"ruleId":"137","severity":1,"message":"138","line":222,"column":40,"nodeType":"139","messageId":"140","endLine":222,"endColumn":42},{"ruleId":"137","severity":1,"message":"138","line":223,"column":19,"nodeType":"139","messageId":"140","endLine":223,"endColumn":21},{"ruleId":"137","severity":1,"message":"138","line":223,"column":50,"nodeType":"139","messageId":"140","endLine":223,"endColumn":52},{"ruleId":"137","severity":1,"message":"138","line":227,"column":27,"nodeType":"139","messageId":"140","endLine":227,"endColumn":29},{"ruleId":"137","severity":1,"message":"138","line":230,"column":24,"nodeType":"139","messageId":"140","endLine":230,"endColumn":26},{"ruleId":"137","severity":1,"message":"138","line":232,"column":22,"nodeType":"139","messageId":"140","endLine":232,"endColumn":24},{"ruleId":"142","severity":1,"message":"143","line":233,"column":19,"nodeType":"133","messageId":"144","endLine":233,"endColumn":26},{"ruleId":"137","severity":1,"message":"138","line":243,"column":22,"nodeType":"139","messageId":"140","endLine":243,"endColumn":24},{"ruleId":"137","severity":1,"message":"138","line":256,"column":14,"nodeType":"139","messageId":"140","endLine":256,"endColumn":16},{"ruleId":"137","severity":1,"message":"138","line":256,"column":28,"nodeType":"139","messageId":"140","endLine":256,"endColumn":30},{"ruleId":"137","severity":1,"message":"138","line":320,"column":23,"nodeType":"139","messageId":"140","endLine":320,"endColumn":25},{"ruleId":"137","severity":1,"message":"138","line":451,"column":23,"nodeType":"139","messageId":"140","endLine":451,"endColumn":25},{"ruleId":"137","severity":1,"message":"138","line":509,"column":28,"nodeType":"139","messageId":"140","endLine":509,"endColumn":30},{"ruleId":"137","severity":1,"message":"138","line":542,"column":23,"nodeType":"139","messageId":"140","endLine":542,"endColumn":25},{"ruleId":"137","severity":1,"message":"138","line":607,"column":28,"nodeType":"139","messageId":"140","endLine":607,"endColumn":30},{"ruleId":"137","severity":1,"message":"138","line":626,"column":23,"nodeType":"139","messageId":"140","endLine":626,"endColumn":25},{"ruleId":"137","severity":1,"message":"138","line":665,"column":29,"nodeType":"139","messageId":"140","endLine":665,"endColumn":31},{"ruleId":"145","severity":1,"message":"146","line":665,"column":77,"nodeType":"139","messageId":"147","endLine":665,"endColumn":78},{"ruleId":"137","severity":1,"message":"138","line":685,"column":29,"nodeType":"139","messageId":"140","endLine":685,"endColumn":31},{"ruleId":"145","severity":1,"message":"146","line":685,"column":77,"nodeType":"139","messageId":"147","endLine":685,"endColumn":78},{"ruleId":"124","severity":1,"message":"125","line":7,"column":3,"nodeType":"126","messageId":"127","endLine":10,"endColumn":4},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-unused-vars","'FormControlLabel' is defined but never used.","Identifier","unusedVar","'ListItemSecondaryAction' is defined but never used.","'Label' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-redeclare","'message' is already defined.","redeclared","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","no-global-assign","no-unsafe-negation"]